<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommonProvider</name>
    </assembly>
    <members>
        <member name="T:CommonProvider.Configuration.IProviderConfigurationManager">
            <summary>
            Represents the base interface for a ProviderConfigurationManager.
            </summary>
        </member>
        <member name="M:CommonProvider.Configuration.IProviderConfigurationManager.GetSection(System.String)">
            <summary>
            Gets the section in the configuration file that has the 
            CommonProvider's configuration.
            </summary>
            <param name="sectionName">The name of CommonProvider's 
            configuration section.</param>
            <returns>The configuration section</returns>
        </member>
        <member name="T:CommonProvider.Configuration.ProviderConfigurationManager">
            <summary>
            Represents the default implementation of IProviderConfigurationManager.
            </summary>
        </member>
        <member name="M:CommonProvider.Configuration.ProviderConfigurationManager.GetSection(System.String)">
            <summary>
            Gets the section in the configuration file that has the 
            CommonProvider's configuration.
            </summary>
            <param name="sectionName">The name of CommonProvider's 
            configuration section.</param>
            <returns>The configuration section</returns>
        </member>
        <member name="T:CommonProvider.Helpers.GenericMethodInvoker">
            <summary>
            Provides a mean to dyncamically invoke a generic method.
            </summary>
        </member>
        <member name="M:CommonProvider.Helpers.GenericMethodInvoker.Invoke(System.Object,System.String,System.Type,System.Object[],System.Nullable{System.Reflection.BindingFlags})">
            <summary>
            Dynamically invokes a generic method.
            </summary>
            <param name="obj">The object that has the method.</param>
            <param name="methodName">The name of the method.</param>
            <param name="genericType">The generic type.</param>
            <param name="parameters">The method parameters.</param>
            <param name="bindingFlags">Specifies flags that control binding and the way in 
            which the search for members and types is conducted by reflection.</param>
            <returns>Object returned from the method call.</returns>
        </member>
        <member name="T:CommonProvider.Exceptions.DataParseException">
            <summary>
            Represents an exception thats thrown during a data parse operation.
            </summary>
        </member>
        <member name="M:CommonProvider.Exceptions.DataParseException.#ctor">
            <summary>
            Initializes a new instance of the DataParseException class.
            </summary>
        </member>
        <member name="M:CommonProvider.Exceptions.DataParseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of DataParseException with a specified error message.
            </summary>
            <param name="message">A message that describes the error</param>
        </member>
        <member name="M:CommonProvider.Exceptions.DataParseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of DataParseException with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message that describes the error</param>
            <param name="innerException">The cause of the current exception</param>
        </member>
        <member name="T:CommonProvider.Exceptions.CreateProviderException">
            <summary>
            Represents an exception thats thrown during the creation of a provider.
            </summary>
        </member>
        <member name="M:CommonProvider.Exceptions.CreateProviderException.#ctor">
            <summary>
            Initializes a new instance of the CreateProviderException class.
            </summary>
        </member>
        <member name="M:CommonProvider.Exceptions.CreateProviderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of CreateProviderException with a specified error message.
            </summary>
            <param name="message">A message that describes the error</param>
        </member>
        <member name="M:CommonProvider.Exceptions.CreateProviderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of CreateProviderException with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message that describes the error</param>
            <param name="innerException">The cause of the current exception</param>
        </member>
        <member name="T:CommonProvider.Exceptions.ProviderLoadException">
            <summary>
            Represents an exception thats thrown when providers are loaded.
            </summary>
        </member>
        <member name="M:CommonProvider.Exceptions.ProviderLoadException.#ctor">
            <summary>
            Initializes a new instance of the ProviderLoadException class.
            </summary>
        </member>
        <member name="M:CommonProvider.Exceptions.ProviderLoadException.#ctor(System.String)">
            <summary>
            Initializes a new instance of ProviderLoadException with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:CommonProvider.Exceptions.ProviderLoadException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of ProviderLoadException with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The cause of the current exception.</param>
        </member>
        <member name="T:CommonProvider.Data.Parsers.PipedDataParser">
            <summary>
            Represents the default data parser and parses a piped delimited string of data.
            </summary>
        </member>
        <member name="T:CommonProvider.Data.Parsers.IDataParser">
            <summary>
            Represents the base interface for a data parser.
            </summary>
        </member>
        <member name="M:CommonProvider.Data.Parsers.IDataParser.Parse``1(System.String)">
            <summary>
            Parses a string of data to the specified generic type.
            </summary>
            <typeparam name="T">The generic type to parse the data to.</typeparam>
            <param name="data">The string of data to be parsed.</param>
            <returns>The resultant object after parsing.</returns>
        </member>
        <member name="M:CommonProvider.Data.Parsers.PipedDataParser.Parse``1(System.String)">
            <summary>
            Parses a string of data to the specified type.
            </summary>
            <typeparam name="T">The generic type to parse the data to.</typeparam>
            <param name="data">The string of data to be parsed.</param>
            <returns>The resultant object after parsing.</returns>
        </member>
        <member name="T:CommonProvider.ProviderLoaders.ConfigProviderLoader">
            <summary>
            Represents an implementation of ProviderLoaderBase that retrieves provider 
            information from a configuration file. The Config Provider Loader requires 
            that information regarding the providers be pre-configured before loading.
            </summary>
        </member>
        <member name="T:CommonProvider.ProviderLoaders.ProviderLoaderBase">
            <summary>
            Represents the base class for a Provider Loader.
            </summary>
        </member>
        <member name="M:CommonProvider.ProviderLoaders.ProviderLoaderBase.PerformLoad">
            <summary>
            Loads information regrading all providers e.g. Type, Name etc. 
            This method is visible to only classes that derive from 
            ProviderLoaderBase. Its is called internally by the public 
            Load() method.
            </summary>
            <returns>The loaded data for providers.</returns>
        </member>
        <member name="M:CommonProvider.ProviderLoaders.ProviderLoaderBase.Load">
            <summary>
            Loads information regrading all providers e.g. Type, Name etc.
            </summary>
            <returns>The loaded providers data.</returns>
        </member>
        <member name="M:CommonProvider.ProviderLoaders.ConfigProviderLoader.#ctor(CommonProvider.Configuration.IProviderConfigurationManager)">
            <summary>
            Initializes an instance of ConfigProviderLoader using the specified
            ProviderConfigurationManager
            </summary>
            <param name="providerConfigurationManager">The provider configuration manager.</param>
        </member>
        <member name="M:CommonProvider.ProviderLoaders.ConfigProviderLoader.PerformLoad">
            <summary>
            Loads information regrading all providers from a configuration file.
            </summary>
            <returns>The loaded providers data.</returns>
        </member>
        <member name="T:CommonProvider.ProviderLoaders.DirectoryProviderLoader">
            <summary>
            Represents an implementation of ProviderLoaderBase that loads information 
            regarding all providers from assemblies. The assemblies are located in the 
            specified directory. The Directory Provider Loader does not require 
            any configuration.
            </summary>
        </member>
        <member name="M:CommonProvider.ProviderLoaders.DirectoryProviderLoader.#ctor(System.String)">
            <summary>
            Initializes an instance of DirectoryProviderLoader with the specified 
            assembly directory.
            </summary>
            <param name="assemblyDirectory">The directory where the assemblies 
            are located.</param>
        </member>
        <member name="M:CommonProvider.ProviderLoaders.DirectoryProviderLoader.PerformLoad">
            <summary>
            Loads information regrading all providers from assemblies located in the specified 
            directory. All providers loaded using the Directory Provider Loader are enabled by 
            default. Remove a provider's assembly from the specified directory if you choose 
            to not load it.
            </summary>
            <returns>The loaded providers data.</returns>
        </member>
        <member name="T:CommonProvider.Configuration.ProviderConfigSection">
            <summary>
            Represents a Provider configuration section.
            </summary>
        </member>
        <member name="P:CommonProvider.Configuration.ProviderConfigSection.Types">
            <summary>
            Gets a collection of types.
            </summary>
        </member>
        <member name="P:CommonProvider.Configuration.ProviderConfigSection.Providers">
            <summary>
            Gets a collection of providers.
            </summary>
        </member>
        <member name="P:CommonProvider.Configuration.ProviderConfigSection.Settings">
            <summary>
            Gets a collection of provider wide settings.
            </summary>
        </member>
        <member name="T:CommonProvider.Configuration.ProviderElement">
            <summary>
            Represents a Provider configuration element.
            </summary>
        </member>
        <member name="P:CommonProvider.Configuration.ProviderElement.Name">
            <summary>
            Gets or sets a provider's name.
            </summary>
        </member>
        <member name="P:CommonProvider.Configuration.ProviderElement.Group">
            <summary>
            Gets or sets a provider's group.
            </summary>
        </member>
        <member name="P:CommonProvider.Configuration.ProviderElement.Type">
            <summary>
            Gets or sets a provider's type.
            </summary>
        </member>
        <member name="P:CommonProvider.Configuration.ProviderElement.IsEnabled">
            <summary>
            Gets or sets a value indicating whether or not the provider has been enabled.
            </summary>
        </member>
        <member name="P:CommonProvider.Configuration.ProviderElement.Settings">
            <summary>
            Gets a collection of provider specific settings.
            </summary>
        </member>
        <member name="T:CommonProvider.Configuration.ProviderElementCollection">
            <summary>
            Represents a Provider configuration element collection.
            </summary>
        </member>
        <member name="M:CommonProvider.Configuration.ProviderElementCollection.CreateNewElement">
            <summary>
            Creates an instance of a provider configuration element.
            </summary>
            <returns>An instance of a Provider configuration element.</returns>
        </member>
        <member name="M:CommonProvider.Configuration.ProviderElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the unique identifier for a provider element.
            </summary>
            <param name="element">The provider element.</param>
            <returns>The unique identifier for a provider element.</returns>
        </member>
        <member name="M:CommonProvider.Configuration.ProviderElementCollection.Add(CommonProvider.Configuration.ProviderElement)">
            <summary>
            Adds a configuration element to the collection.
            </summary>
            <param name="element">The element to add.</param>
        </member>
        <member name="M:CommonProvider.Configuration.ProviderElementCollection.Clear">
            <summary>
            Removes all configuration elements from the collection.
            </summary>
        </member>
        <member name="T:CommonProvider.Configuration.ProviderSettingElementCollection">
            <summary>
            Represents a Setting configuration element collection. Could be general 
            or provider specific.
            </summary>
        </member>
        <member name="M:CommonProvider.Configuration.ProviderSettingElementCollection.CreateNewElement">
            <summary>
            Creates an instance of a setting configuration element.
            </summary>
            <returns>An instance of a Setting configuration element.</returns>
        </member>
        <member name="M:CommonProvider.Configuration.ProviderSettingElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the unique identifier for a setting configuration element.
            </summary>
            <param name="element">The provider setting element.</param>
            <returns>The unique identifier for a provider setting element.</returns>
        </member>
        <member name="M:CommonProvider.Configuration.ProviderSettingElementCollection.Add(CommonProvider.Configuration.ProviderSettingElement)">
            <summary>
            Adds a configuration element to the collection.
            </summary>
            <param name="element">The element to add.</param>
        </member>
        <member name="M:CommonProvider.Configuration.ProviderSettingElementCollection.Clear">
            <summary>
            Removes all configuration elements from the collection.
            </summary>
        </member>
        <member name="P:CommonProvider.Configuration.ProviderSettingElementCollection.DataParserType">
            <summary>
            Gets or sets the data parser type for the setting. This is used to 
            parse strings of data to specified types.
            </summary>
        </member>
        <member name="T:CommonProvider.Configuration.ProviderSettingElement">
            <summary>
            Represents a Setting configuration element. Could be general or provider specific.
            </summary>
        </member>
        <member name="P:CommonProvider.Configuration.ProviderSettingElement.Key">
            <summary>
            Gets or sets the setting key.
            </summary>
        </member>
        <member name="P:CommonProvider.Configuration.ProviderSettingElement.Value">
            <summary>
            Gets or sets the setting value.
            </summary>
        </member>
        <member name="T:CommonProvider.Configuration.TypeElementCollection">
            <summary>
            Represents a Types configuration element collection.
            </summary>
        </member>
        <member name="M:CommonProvider.Configuration.TypeElementCollection.CreateNewElement">
            <summary>
            Creates a new Type configuration element.
            </summary>
            <returns>An instance of a Type configuration element.</returns>
        </member>
        <member name="M:CommonProvider.Configuration.TypeElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the unique identifier for a Type configuration element.
            </summary>
            <param name="element">The Type configuration element.</param>
            <returns>The unique identifier Type configuration element.</returns>
        </member>
        <member name="M:CommonProvider.Configuration.TypeElementCollection.Add(CommonProvider.Configuration.TypeElement)">
            <summary>
            Adds a configuration element to the collection.
            </summary>
            <param name="element">The element to add.</param>
        </member>
        <member name="M:CommonProvider.Configuration.TypeElementCollection.Clear">
            <summary>
            Removes all configuration elements from the collection.
            </summary>
        </member>
        <member name="T:CommonProvider.Configuration.TypeElement">
            <summary>
            Represents a Type configuration element.
            </summary>
        </member>
        <member name="P:CommonProvider.Configuration.TypeElement.Name">
            <summary>
            Gets or sets the name of a Type.
            </summary>
        </member>
        <member name="P:CommonProvider.Configuration.TypeElement.Type">
            <summary>
            Gets or sets the type of the Type.
            </summary>
        </member>
        <member name="T:CommonProvider.Data.ProviderData">
            <summary>
            Represents the default implementation of IProviderData. It holds information 
            regarding all loaded providers.
            </summary>
        </member>
        <member name="T:CommonProvider.Data.IProviderData">
            <summary>
            Represents the base interface for ProviderData. It holds 
            information regarding all loaded providers.
            </summary>
        </member>
        <member name="P:CommonProvider.Data.IProviderData.Settings">
            <summary>
            Gets provider wide settings.
            </summary>
        </member>
        <member name="P:CommonProvider.Data.IProviderData.ProviderDescriptors">
            <summary>
            Gets the meta data of a loaded Provider e.g. Name, Type etc.
            </summary>
        </member>
        <member name="M:CommonProvider.Data.ProviderData.#ctor(System.Collections.Generic.IEnumerable{CommonProvider.Data.IProviderDescriptor},CommonProvider.Data.ISettings)">
            <summary>
            Initializes a new instance of ProviderData with a specified collection 
            of provider descriptors and provider wide settings.
            </summary>
            <param name="providerDescriptors">It holds information regarding the 
            loaded providers.</param>
            <param name="settings">The provider wide settings.</param>
        </member>
        <member name="P:CommonProvider.Data.ProviderData.Settings">
            <summary>
            Gets provider wide settings.
            </summary>
        </member>
        <member name="P:CommonProvider.Data.ProviderData.ProviderDescriptors">
            <summary>
            Gets information regarding all loaded providers.
            </summary>
        </member>
        <member name="T:CommonProvider.Data.ProviderDescriptor">
            <summary>
            Represents the default implementation of IProviderDescriptor. It holds meta 
            data information regarding a specific loaded provider.
            </summary>
        </member>
        <member name="T:CommonProvider.Data.IProviderDescriptor">
            <summary>
            Represents the base interface for a Provider Descriptor. It holds meta 
            data information regarding a specific loaded provider.
            </summary>
        </member>
        <member name="P:CommonProvider.Data.IProviderDescriptor.ProviderName">
            <summary>
            Gets the provider's name.
            </summary>
        </member>
        <member name="P:CommonProvider.Data.IProviderDescriptor.ProviderType">
            <summary>
            Gets the provider's type.
            </summary>
        </member>
        <member name="P:CommonProvider.Data.IProviderDescriptor.ProviderGroup">
            <summary>
            Gets the provider's group.
            </summary>
        </member>
        <member name="P:CommonProvider.Data.IProviderDescriptor.ProviderSettings">
            <summary>
            Gets the provider's settings.
            </summary>
        </member>
        <member name="P:CommonProvider.Data.IProviderDescriptor.IsEnabled">
            <summary>
            Gets a value indicating whether or not the provider is enabled.
            </summary>
        </member>
        <member name="M:CommonProvider.Data.ProviderDescriptor.#ctor(System.String,System.String,System.Type,CommonProvider.Data.ISettings,System.Boolean)">
            <summary>
            Initializes an instance of ProviderDescriptor using the specified provider details.
            </summary>
            <param name="providerName">The provider's name.</param>
            <param name="providerGroup">The provider's group.</param>
            <param name="providerType">The provider's type.</param>
            <param name="providerSettings">The provider's settings.</param>
            <param name="isEnabled">A value indicating whether or not the provider has been enabled.</param>
        </member>
        <member name="P:CommonProvider.Data.ProviderDescriptor.ProviderName">
            <summary>
            Gets a providers's name.
            </summary>
        </member>
        <member name="P:CommonProvider.Data.ProviderDescriptor.ProviderType">
            <summary>
            Gets a provider's type.
            </summary>
        </member>
        <member name="P:CommonProvider.Data.ProviderDescriptor.ProviderGroup">
            <summary>
            Gets a provider's group.
            </summary>
        </member>
        <member name="P:CommonProvider.Data.ProviderDescriptor.ProviderSettings">
            <summary>
            Gets a provider's settings.
            </summary>
        </member>
        <member name="P:CommonProvider.Data.ProviderDescriptor.IsEnabled">
            <summary>
            Gets a value indicating if the provider is enabled or not.
            </summary>
        </member>
        <member name="T:CommonProvider.Factories.ProviderFactory">
            <summary>
            Represents the default implementation of a Provider List Factory. 
            It provides a means to create a Provider List.
            </summary>
        </member>
        <member name="T:CommonProvider.Factories.ProviderFactoryBase">
            <summary>
            Represents the base class for a Provider Factory. 
            It provides a means to create a Provider.
            </summary>
        </member>
        <member name="M:CommonProvider.Factories.ProviderFactoryBase.Create``1">
            <summary>
            Instantiates a Provider based on the specified type.
            </summary>
            <typeparam name="T">The type of provider to instantiate.</typeparam>
            <returns>An object instance based on the specified type.</returns>
        </member>
        <member name="M:CommonProvider.Factories.ProviderFactoryBase.Create``1(CommonProvider.Data.IProviderDescriptor)">
            <summary>
            Creates a Provider based on the specified type.
            </summary>
            <typeparam name="T">The type to cast the provider to.</typeparam>
            <param name="providerDescriptor">Holds information about the provider to be created.</param>
            <returns>The created Provider.</returns>
        </member>
        <member name="M:CommonProvider.Factories.ProviderFactory.Create``1">
            <summary>
            Instantiates a Provider based on the specified type.
            </summary>
            <typeparam name="T">The type of provider to instantiate.</typeparam>
            <returns>An object instance based on the specified type.</returns>
        </member>
        <member name="T:CommonProvider.Factories.ProvidersFactory">
            <summary>
            Represents the default implementation of IProvidersFactory. 
            It provides a means to create a set of Providers.
            </summary>
        </member>
        <member name="T:CommonProvider.Factories.IProvidersFactory">
            <summary>
            Represents the base interface for a Provider List Factory. 
            It provides a means to create a Provider List.
            </summary>
        </member>
        <member name="M:CommonProvider.Factories.IProvidersFactory.Create(System.Collections.Generic.IEnumerable{CommonProvider.Data.IProviderDescriptor})">
            <summary>
            Creates a Provider List based on the specified Provider Descriptors.
            </summary>
            <param name="providerDescriptors">Holds information regarding the providers.</param>
            <returns>The Provider List.</returns>
        </member>
        <member name="M:CommonProvider.Factories.ProvidersFactory.#ctor(CommonProvider.Factories.ProviderFactoryBase)">
            <summary>
            Initializes a new instance of ProviderListFactory 
            with a specified provider factory.
            </summary>
            <param name="providerFactory"></param>
        </member>
        <member name="M:CommonProvider.Factories.ProvidersFactory.#ctor">
            <summary>
            The default constructor of ProviderListFactory. The default provider 
            factory is used if the default constructor was called.
            </summary>
        </member>
        <member name="M:CommonProvider.Factories.ProvidersFactory.Create(System.Collections.Generic.IEnumerable{CommonProvider.Data.IProviderDescriptor})">
            <summary>
            Creates a Provider List based on the specified Provider Descriptors.
            </summary>
            <param name="providerDescriptors">Holds information regarding the providers.</param>
            <returns>The Provider List.</returns>
        </member>
        <member name="T:CommonProvider.DependencyManagement.DependencyResolver">
            <summary>
            Represents the default implementation of a dependency resolver. 
            It uses Activator.CreateInstance() to resolve an object instance.
            </summary>
        </member>
        <member name="T:CommonProvider.DependencyManagement.IDependencyResolver">
            <summary>
            Represents the base interface for a dependency resolver. It provides 
            a means to instantiate an object and resolve its dependencies.
            </summary>
        </member>
        <member name="M:CommonProvider.DependencyManagement.IDependencyResolver.Resolve``1">
            <summary>
            Resolves an instance of the specified type.
            </summary>
            <typeparam name="T">The type to resolve.</typeparam>
            <returns>An instance of the type.</returns>
        </member>
        <member name="M:CommonProvider.DependencyManagement.DependencyResolver.#ctor">
            <summary>
            The main constructor for DependencyResolver.
            </summary>
        </member>
        <member name="M:CommonProvider.DependencyManagement.DependencyResolver.Resolve``1">
            <summary>
            Resolves an instance of the specified type using 
            Activator.CreateInstance().
            </summary>
            <typeparam name="T">The type to resolve.</typeparam>
            <returns>An instance of the type.</returns>
        </member>
        <member name="M:CommonProvider.DependencyManagement.DependencyResolver.Dispose">
            <summary>
            Releases and frees up resources.
            </summary>
        </member>
        <member name="T:CommonProvider.DependencyManagement.DependencyResolverService">
            <summary>
            Represents a Service that sets or internally gets a dependency resolver. 
            It uses a single instance for resolving types once set.
            </summary>
        </member>
        <member name="M:CommonProvider.DependencyManagement.DependencyResolverService.GetResolver">
            <summary>
            Gets the dependency resolver.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CommonProvider.DependencyManagement.DependencyResolverService.SetResolver(CommonProvider.DependencyManagement.IDependencyResolver)">
            <summary>
            Sets the dependency resolver.
            </summary>
            <param name="dependencyResolver">The dependency resolve to be set.</param>
        </member>
        <member name="T:CommonProvider.IProviderManager">
            <summary>
            Represents the base interface for IProviderManager. This is 
            the gateway to all providers and provider wide settings.
            </summary>
        </member>
        <member name="P:CommonProvider.IProviderManager.Providers">
            <summary>
            Gets the set of loaded providers.
            </summary>
        </member>
        <member name="P:CommonProvider.IProviderManager.Settings">
            <summary>
            Gets all provider wide settings.
            </summary>
        </member>
        <member name="T:CommonProvider.ProviderManager">
            <summary>
            Represents the default implementation of IProviderManager. 
            This is the gateway to all providers and provider wide 
            settings.
            </summary>
        </member>
        <member name="M:CommonProvider.ProviderManager.#ctor(CommonProvider.ProviderLoaders.ProviderLoaderBase,CommonProvider.Factories.IProvidersFactory)">
            <summary>
            Initializes an instance of ProviderManager using the specified 
            provider loader and provider list factory.
            </summary>
            <param name="providerLoader">The provider loader to use in loading 
            the providers.</param>
            <param name="providersFactory">The Providers factory to use 
            in creating the set of providers.</param>
        </member>
        <member name="P:CommonProvider.ProviderManager.Providers">
            <summary>
            Gets the set of loaded providers.
            </summary>
        </member>
        <member name="P:CommonProvider.ProviderManager.Settings">
            <summary>
            Gets all provider wide settings.
            </summary>
        </member>
        <member name="T:CommonProvider.IProvider">
            <summary>
            Represents the base interface for a Provider.
            </summary>
        </member>
        <member name="P:CommonProvider.IProvider.Name">
            <summary>
            Gets a provider's name.
            </summary>
        </member>
        <member name="P:CommonProvider.IProvider.Settings">
            <summary>
            Gets a provider's settings.
            </summary>
        </member>
        <member name="P:CommonProvider.IProvider.Group">
            <summary>
            Gets a provider's group.
            </summary>
        </member>
        <member name="T:CommonProvider.Data.Providers">
            <summary>
            Represents a set of Providers.
            </summary>
        </member>
        <member name="T:CommonProvider.Data.IProviders">
            <summary>
            Represents the base interface for a set of Providers.
            </summary>
        </member>
        <member name="M:CommonProvider.Data.IProviders.All``1">
            <summary>
            Gets all providers of the specified type.
            </summary>
            <typeparam name="T">The type of the providers to get.</typeparam>
            <returns>The matching providers.</returns>
        </member>
        <member name="M:CommonProvider.Data.IProviders.All">
            <summary>
            Gets all providers.
            </summary>
            <returns>The providers.</returns>
        </member>
        <member name="M:CommonProvider.Data.IProviders.ByGroup(System.String)">
            <summary>
            Gets providers that belong to the specified group.
            </summary>
            <param name="groupName">The group name of the providers to get.</param>
            <returns>The matching providers.</returns>
        </member>
        <member name="M:CommonProvider.Data.IProviders.ByGroup``1(System.String)">
            <summary>
            Gets providers that belong to the specified group and are of the specified type.
            </summary>
            <typeparam name="T">The type of the providers to get.</typeparam>
            <param name="groupName">The group name of the providers to get.</param>
            <returns>The matching providers.</returns>
        </member>
        <member name="M:CommonProvider.Data.IProviders.ByName``1(System.String)">
            <summary>
            Gets a provider with the specified name and of the specified type.
            </summary>
            <typeparam name="T">The type of the providers to get.</typeparam>
            <param name="providerName">The name of the provider to get.</param>
            <returns>The matching provider.</returns>
        </member>
        <member name="M:CommonProvider.Data.IProviders.ByName(System.String)">
            <summary>
            Gets a provider with the specified name.
            </summary>
            <param name="providerName">The name of the provider to get.</param>
            <returns>The matching provider.</returns>
        </member>
        <member name="P:CommonProvider.Data.IProviders.Item(System.String)">
            <summary>
            Gets a provider with the specified name.
            </summary>
            <param name="providerName">The name of the provider to get.</param>
            <returns>The matching provider.</returns>
        </member>
        <member name="P:CommonProvider.Data.IProviders.Item(System.String,System.Type)">
            <summary>
            Gets a provider with the specified name.
            </summary>
            <param name="providerName">The name of the provider to get.</param>
            <param name="type">The type of provider.</param>
            <returns>The matching provider.</returns>
        </member>
        <member name="P:CommonProvider.Data.IProviders.Count">
            <summary>
            Gets the count of providers
            </summary>
        </member>
        <member name="M:CommonProvider.Data.Providers.#ctor(System.Collections.Generic.IEnumerable{CommonProvider.Data.IProviderDescriptor},CommonProvider.Factories.ProviderFactoryBase)">
            <summary>
            Initializes a new instance of Providers with the specified provider 
            descriptors and a provider factory.
            </summary>
            <param name="providerDescriptors">A collection of provider providerDescriptors 
            that holds information regarding all loaded providers.</param>
            <param name="providerFactory">The provider factory used to create providers 
            as requested.</param>
        </member>
        <member name="M:CommonProvider.Data.Providers.#ctor(System.Collections.Generic.IEnumerable{CommonProvider.Data.IProviderDescriptor})">
            <summary>
            Initializes a new instance of Providers with the specified provider descriptors. 
            It internally uses the default provider factory for creating providers.
            </summary>
            <param name="providerDescriptors">A collection of provider descriptors that holds 
            information regarding all loaded providers.</param>
        </member>
        <member name="M:CommonProvider.Data.Providers.All``1">
            <summary>
            Gets all providers of the specified type.
            </summary>
            <typeparam name="T">The type of the providers to get.</typeparam>
            <returns>The matching providers.</returns>
        </member>
        <member name="M:CommonProvider.Data.Providers.All">
            <summary>
            Gets all providers.
            </summary>
            <returns>The providers.</returns>
        </member>
        <member name="M:CommonProvider.Data.Providers.ByGroup(System.String)">
            <summary>
            Gets providers that belong to the specified group.
            </summary>
            <param name="groupName">The group name of the providers to get.</param>
            <returns>The matching providers.</returns>
        </member>
        <member name="M:CommonProvider.Data.Providers.ByGroup``1(System.String)">
            <summary>
            Gets providers that belong to the specified group and are of the specified type.
            </summary>
            <typeparam name="T">The type of the providers to get.</typeparam>
            <param name="groupName">The group name of the providers to get.</param>
            <returns>The matching providers.</returns>
        </member>
        <member name="M:CommonProvider.Data.Providers.ByName``1(System.String)">
            <summary>
            Gets a provider with the specified name and of the specified type.
            </summary>
            <typeparam name="T">The type of the providers to get.</typeparam>
            <param name="providerName">The name of the provider to get.</param>
            <returns>The matching provider.</returns>
        </member>
        <member name="M:CommonProvider.Data.Providers.ByName(System.String)">
            <summary>
            Gets a provider with the specified name.
            </summary>
            <param name="providerName">The name of the provider to get.</param>
            <returns>The matching provider.</returns>
        </member>
        <member name="P:CommonProvider.Data.Providers.Item(System.String)">
            <summary>
            Gets a provider with the specified name.
            </summary>
            <param name="providerName">The name of the provider to get.</param>
            <returns>The matching provider.</returns>
        </member>
        <member name="P:CommonProvider.Data.Providers.Item(System.String,System.Type)">
            <summary>
            Gets a provider with the specified name.
            </summary>
            <param name="providerName">The name of the provider to get.</param>
            <param name="type">The type of provider.</param>
            <returns>The matching provider.</returns>
        </member>
        <member name="P:CommonProvider.Data.Providers.Count">
            <summary>
            Gets the count of providers
            </summary>
        </member>
        <member name="T:CommonProvider.Data.ISettings">
            <summary>
            Represents the base interface for a set of Settings.
            </summary>
        </member>
        <member name="M:CommonProvider.Data.ISettings.Get``1(System.String)">
            <summary>
            Gets a setting with the specified name and of the specified generic type.
            </summary>
            <typeparam name="T">The generic type return.</typeparam>
            <param name="settingName">The name of the setting to get.</param>
            <returns>The setting with the specified name of the specified generic type.</returns>
        </member>
        <member name="P:CommonProvider.Data.ISettings.Item(System.String)">
            <summary>
            Gets a setting with the specified name.
            </summary>
            <param name="settingName">The name of the setting to get.</param>
            <returns>The setting with the specified name.</returns>
        </member>
        <member name="P:CommonProvider.Data.ISettings.Item(System.String,System.Type)">
            <summary>
            Gets a setting with the specified name and of the specified type.
            </summary>
            <param name="settingName">The name of the setting to get.</param>
            <param name="type">The type return.</param>
            <returns>The setting with the specified name of the specified type.</returns>
        </member>
        <member name="P:CommonProvider.Data.ISettings.Count">
            <summary>
            Gets the count of settings
            </summary>
        </member>
        <member name="T:CommonProvider.Data.Settings">
            <summary>
            Represents the default implementation of ISettings. It holds a set of settings.
            </summary>
        </member>
        <member name="M:CommonProvider.Data.Settings.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Initializes an instance of Settings using the specified arguments.
            </summary>
            <param name="settings">A dictionary copy of the settings.</param>
            <param name="dataParserType">The data parser to use in parsing 
            strings of data to a specified type.</param>
        </member>
        <member name="M:CommonProvider.Data.Settings.Get``1(System.String)">
            <summary>
            Gets a setting with the specified name and of the specified generic type.
            </summary>
            <typeparam name="T">The generic type return.</typeparam>
            <param name="settingName">The name of the setting to get.</param>
            <returns>The setting with the specified name of the specified generic type.</returns>
        </member>
        <member name="P:CommonProvider.Data.Settings.Count">
            <summary>
            Gets the count of settings
            </summary>
        </member>
        <member name="P:CommonProvider.Data.Settings.Item(System.String,System.Type)">
            <summary>
            Gets a setting with the specified name and of the specified type.
            </summary>
            <param name="settingName">The name of the setting to get.</param>
            <param name="type">The type of the setting.</param>
            <returns>The setting with the specified name of the specified type</returns>
        </member>
        <member name="P:CommonProvider.Data.Settings.Item(System.String)">
            <summary>
            Gets a setting with the specified name.
            </summary>
            <param name="settingName">The name of the setting to get.</param>
            <returns>The setting with the specified name.</returns>
        </member>
    </members>
</doc>
